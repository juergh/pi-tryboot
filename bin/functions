#!/bin/sh
#
# Simple helper functions
#

# TB:  Tryboot bootloader
# TBE: Tryboot bootloader entry

set -u

# ----------------------------------------------------------------------------
# TB helpers

#
# Exit handler
#
tb_exit()
{
	rc=${?}

	tb_untrap_exit

	if [ ${rc} -ne 0 ] ; then
		echo "-- Script failed" >&2
	fi

	exit "${rc}"
}

#
# Remove exit handler
#
tb_untrap_exit()
{
	trap - EXIT INT TERM HUP
}

#
# Install exit handler
#
tb_trap_exit()
{
	trap tb_exit EXIT INT TERM HUP
}

#
# Check if tryboot bootloader is initialized
#
tb_inited()
{
	test -d "${TB_DIR}"
}

#
# Initialize tryboot bootloader
#
tb_init()
{
	if tb_inited ; then
		# Already initialized
		return
	fi

	# Create the tryboot root directory
	mkdir -p "${TB_DIR}"

	# Back up the original config.txt (twice, just in case)
	cp "${FW_DIR}"/config.txt "${TB_DIR}"/
	cp "${FW_DIR}"/config.txt "${FW_DIR}"/config.orig.txt

	# Set the default commandline
	cmdline=$(head -1 "${FW_DIR}"/cmdline.txt)
	sed -i "s/__CMDLINE__/${cmdline}/" /etc/default/tryboot

	# Install the highest kernel and make it the default
	tbe=$(tb_print_highest_kernel)
	tb_install_tbe "${tbe}"
	tb_update_tbe "${tbe}"
	tb_set_default_tbe "${tbe}"

	# Create the tryboot.cfg config file
	tb_create_tryboot_cfg
}

#
# Print the highest installed kernel version
#
tb_print_highest_kernel()
{
	find "${BOOT_DIR}"/vmlinuz-* | sort -Vr | head -1 | sed 's,.*/vmlinuz-,,'
}

#
# Source /etc/default config files
#
tb_source_etc_default_configs()
{
	for cfg in /etc/default/tryboot /etc/default/tryboot.d/* ; do
		if [ -e "${cfg}" ] ; then
			# shellcheck disable=SC1090
			. "${cfg}"
		fi
	done
}

#
# Print the list of available hook scripts
#
tb_print_hook_list()
{
	for f in "${PKG_DIR}"/hooks/* ; do
		if [ -x "${f}" ] ; then
			echo "${f}"
		fi
	done | sort -u
}

#
# Print the tryboot bootloader configuration
#
tb_print_config()
{
	# The list of menu entry indeces
	tbe_idxs=$(tb_print_tbe_list | nl -w 1 -s " " | sed -e "s, .*,," | \
	           tr "\n" " ")
	hook_idxs=$(tb_print_hook_list | sed -e "s,.*/,," -e "s,-.*,," | \
	            tr "\n" " ")
	cat <<EOF
TB_MENU_ENTRIES="${tbe_idxs% } ${hook_idxs% }"

EOF

	# 'Regular' TBE boot menu entries
	idx=0
	tb_print_tbe_list | while read -r tbe ; do
		idx=$((idx + 1))
		cat <<EOF
TB_MENU_ENTRY_${idx}()
{
    TB_MENU_TITLE="${tbe}"
    TB_MENU_EXEC()
    {
        tb_boot_tbe "${tbe}"
    }
}

EOF
	done

	# Hook menu entries
	tb_print_hook_list | while read -r hook ; do
		idx=${hook##*/}
		idx=${idx%%-*}
		cat <<EOF
TB_MENU_ENTRY_${idx}()
{
EOF
		sed 's/^/    /' "${hook}"
		cat <<EOF
}

EOF
	done
}

#
# Create tryboot.cfg
#
tb_create_tryboot_cfg()
{
	tb_print_config > "${TB_DIR}"/tryboot.cfg
}

#
# Source tryboot.cfg
#
tb_source_tryboot_cfg()
{
	if [ -n "${__TB_MENU_DEFAULT_IDX:-}" ]  ; then
		# Already sourced
		return
	fi

	# shellcheck disable=SC1091
	. "${TB_DIR}"/tryboot.cfg

	# Get the saved default TBE
	tbe_default=$(tb_print_default_tbe)

	__TB_MENU_FIRST_TBE=
	__TB_MENU_DEFAULT_IDX=1

	# Parse all menu entries
	for idx in ${TB_MENU_ENTRIES} ; do
		TB_MENU_ENTRY_"${idx}"

		# The first TBE
		if [ "${idx}" = "1" ] ; then
			__TB_MENU_FIRST_TBE=${TB_MENU_TITLE}
		fi

		# The default TBE index
		if [ "${TB_MENU_TITLE}" = "${tbe_default}" ] ; then
			__TB_MENU_DEFAULT_IDX=${idx}
		fi
	done
}

# ----------------------------------------------------------------------------
# TBE inventory helpers

#
# Check if a TBE exists
#
tb_tbe_exists()
{
	tbe=${1}
	tbe_dir=${TB_DIR}/${tbe}

	test -e "${tbe_dir}"/.tbe
}

#
# Print the list of bootable TBEs
#
tb_print_tbe_list()
{
	{
		# Kernels first (reverse sorted, i.e., highest version first)
		for f in "${TB_DIR}"/* ; do
			case "${f}" in
				*/[0-9]*) echo "${f}" ;;
				*)        true ;;
			esac
		done | sort -Vr

		# Anything else (regularly sorted)
		for f in "${TB_DIR}"/* ; do
			case "${f}" in
				*/[0-9]*) true ;;
				*)        echo "${f}" ;;
			esac
		done | sort
	} | while read -r tbe_dir ; do
		tbe=${tbe_dir##*/}
		if [ -e "${tbe_dir}"/config.txt ] ; then
			echo "${tbe}"
		fi
	done
}

#
# Print the default TBE
#
tb_print_default_tbe()
{
	sed -n 's/^# TRYBOOT_ENTRY: //p' "${FW_DIR}"/config.txt
}

#
# Set the default TBE
#
tb_set_default_tbe()
{
	tbe=${1}

	if ! tb_tbe_exists "${tbe}" ; then
		return
	fi

	cp "${TB_DIR}"/"${tbe}"/config.txt "${FW_DIR}"/config.txt
}

# ----------------------------------------------------------------------------
# TBE boot helpers

#
# Print the boot menu
#
tb_print_boot_menu()
{
	# Source tryboot.cfg
	tb_source_tryboot_cfg

	echo "------------------------------------------------------------"
	echo "    Idx   Entry"
	echo "------------------------------------------------------------"

	for idx in ${TB_MENU_ENTRIES} ; do
		# Call the menu entry function from tryboot.cfg
		TB_MENU_ENTRY_"${idx}"

		# Mark the default entry
		if [ "${idx}" = "${__TB_MENU_DEFAULT_IDX}" ] ; then
			def="*"
		else
			def=" "
		fi

		# Add a visual separator
		if [ "${idx%0}" != "${idx}" ] ; then
			echo
		fi

		# Print the menu entry
		printf "%s   %3d   %s\n" "${def}" "${idx}" "${TB_MENU_TITLE}"
	done

	echo "------------------------------------------------------------"
}

#
# Execute a boot menu entry
#
tb_exec_boot_menu_entry()
{
	idx=${1}

	# Source tryboot.cfg
	tb_source_tryboot_cfg

	# Use the default
	if [ -z "${idx}" ] ; then
		idx=${__TB_MENU_DEFAULT_IDX}
	fi

	# Call the menu entry function from tryboot.cfg
	if ! TB_MENU_ENTRY_"${idx}" 2>/dev/null ; then
		echo "-- Invalid index: ${idx}" >&2
		return 1
	fi

	# Execute the menu entry
	TB_MENU_EXEC
}

#
# Boot the provided TBE
#
tb_boot_tbe()
{
	tbe=${1}
	config=${TB_DIR}/${tbe}/config.txt

	if ! [ -e "${config}" ] ; then
		echo "-- No such tryboot entry: ${tbe}" >&2
		return 1
	fi

	# Copy the selected TBE's config.txt
	cp "${config}" "${FW_DIR}"/tryboot.txt

	# Use klibc's reboot if we're running in the initrd
	if test -d /scripts ; then
		/usr/lib/klibc/bin/reboot "0 tryboot"
	else
		reboot "0 tryboot"
	fi
}

# ----------------------------------------------------------------------------
# TBE install, update and remove helpers

#
# Install the tryboot TBE
#
tb_install_tryboot_tbe()
{
	tbe_dir=${TB_DIR}/tryboot

	rm -rf "${tbe_dir}"
	mkdir -p "${tbe_dir}"

	# Copy firmware files from the package
	cp -r "${PKG_DIR}"/tryboot/* "${TB_DIR}"/tryboot

	# Add TBE marker
	touch "${tbe_dir}"/.tbe
}

#
# Install a kernel TBE
#
tb_install_kernel_tbe()
{
	tbe=${1}
	tbe_dir=${TB_DIR}/${tbe}

	if ! [ -e "${BOOT_DIR}"/vmlinuz-"${tbe}" ] ; then
		echo "-- Invalid kernel entry: ${tbe}" >&2
		return 1
	fi

	rm -rf "${tbe_dir}"
	mkdir -p "${tbe_dir}"

	vmlinuz=${BOOT_DIR}/vmlinuz-${tbe}
	initrd=${BOOT_DIR}/initrd.img-${tbe}

	# Copy the kernel and initrd
	cp "${vmlinuz}" "${tbe_dir}"/vmlinuz
	cp "${initrd}" "${tbe_dir}"/initrd.img

	# Copy the DTBS and overlays
	for dtb_dir in /lib/firmware/"${tbe}"/device-tree \
	               /usr/lib/linux-image-"${tbe}" ; do
		if [ -d "${dtb_dir}" ] ; then
			break
		fi
	done
	cp "${dtb_dir}"/broadcom/bcm27* "${tbe_dir}"
	cp -r "${dtb_dir}"/overlays "${tbe_dir}"

	# Add TBE marker
	touch "${tbe_dir}"/.tbe
}

#
# Install a TBE
#
tb_install_tbe()
{
	tbe=${1}

	case "${tbe}" in
		tryboot) tb_install_tryboot_tbe ;;
		*)       tb_install_kernel_tbe "${tbe}" ;;
	esac
}

#
# Create the TBE's config.txt
#
tb_print_tbe_config_txt()
{
	tbe=${1}
	tbe_dir=${TB_DIR}/${tbe}

	# Determine kernel architecture
	if file "${tbe_dir}"/vmlinuz | grep -q "zImage" ; then
		arm_64bit=0
	else
		arm_64bit=1
	fi

	# Determine which config.txt template to use
	if [ "${tbe}" = "tryboot" ] ; then
		config_txt=config.tryboot.txt
	else
		config_txt=config.kernel.txt
	fi

	TRYBOOT_ENTRY=${tbe} \
	ARM_64BIT=${arm_64bit} \
		envsubst < /etc/tryboot.d/"${config_txt}"
}

#
# Update a TBE (config.txt amd cmdline.txt)
#
tb_update_tbe()
{
	tbe=${1}
	tbe_dir=${TB_DIR}/${tbe}

	# config.txt
	tb_print_tbe_config_txt "${tbe}" > "${tbe_dir}"/config.txt

	# cmdline.txt
	tb_source_etc_default_configs
	if [ "${tbe}" = "tryboot" ] ; then
		echo "${TRYBOOT_TRYBOOT_CMDLINE_LINUX}" > "${tbe_dir}"/cmdline.txt
	else
		echo "${TRYBOOT_CMDLINE_LINUX}" > "${tbe_dir}"/cmdline.txt
	fi
}

#
# Update all TBEs
#
tb_update_all_tbes()
{
	for tbe_dir in "${TB_DIR}"/* ; do
		tbe=${tbe_dir##*/}
		if [ -e "${tbe_dir}"/.tbe ] ; then
			tb_update_tbe "${tbe}"
		fi
	done
}

#
# Remove a TBE
#
tb_remove_tbe()
{
	tbe=${1}
	tbe_dir=${TB_DIR}/${tbe}

	rm -rf "${tbe_dir}"
}

#
# Purge everything and restore the original state
#
tb_purge_all()
{
	mv "${FW_DIR}"/config.orig.txt "${FW_DIR}"/config.txt
	rm -f "${FW_DIR}"/tryboot.txt
	rm -rf "${TB_DIR}"
}

# ----------------------------------------------------------------------------
# Main entry point
#

PKG_DIR=/usr/share/pi-tryboot

BOOT_DIR=/boot
if [ -e /boot/firmware/config.txt ] ; then
	FW_DIR=/boot/firmware
else
	FW_DIR=/boot
fi
TB_DIR=${FW_DIR}/tryboot

# Install an exit handler
tb_trap_exit
